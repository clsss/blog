<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nuxt.js on Collin&#39;s Blog</title>
    <link>https://clsss.github.io/blog/categories/nuxt.js/</link>
    <description>Recent content in Nuxt.js on Collin&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zn-Hans</language>
    <lastBuildDate>Wed, 13 Mar 2019 23:04:40 +0800</lastBuildDate>
    
	<atom:link href="https://clsss.github.io/blog/categories/nuxt.js/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Nuxt.js 采坑点</title>
      <link>https://clsss.github.io/blog/blogs/2019-3/nuxt_pit/</link>
      <pubDate>Wed, 13 Mar 2019 23:04:40 +0800</pubDate>
      
      <guid>https://clsss.github.io/blog/blogs/2019-3/nuxt_pit/</guid>
      <description>记录一些nuxt开发中的坑 1. window is undefined 第一个坑就是 ssr 本身导致的。不管使用 element-ui 或者 mint-ui 或者其他的 UI 框架。都是基于 window 环境而非 node 环境。 # vue的情况下，我们是这样使用的 import Vue from &#39;vue&#39; import VueAwesomeSwiper from &#39;vue-awesome-swiper&#39; Vue.use(VueAwesomeSwiper) 修改为支持 ssr，否则就会出现 window is undefined # plugins/mint-ui/index.js import Vue from &#39;vue&#39; if (process.browser) { const VueAwesomeSwiper = require(&#39;vue-awesome-swiper/dist/ssr&#39;) Vue.use(VueAwesomeSwiper) } 2. [Vue warn]: The client-side rendered virtual DOM tree is not matching server-rendered content. This is likely caused by incorrect HTML markup, for example nesting block-level elements inside, or missing . Bailing hydration and performing full client-side render. 服务端与客户端渲染的 DOM 结构不一样，HTML 结构嵌套不正确，但大多数情况下并不是嵌套结构</description>
    </item>
    
    <item>
      <title>Nuxt.js</title>
      <link>https://clsss.github.io/blog/blogs/2018-12/nuxt/</link>
      <pubDate>Sun, 23 Dec 2018 20:24:11 +0800</pubDate>
      
      <guid>https://clsss.github.io/blog/blogs/2018-12/nuxt/</guid>
      <description>一. Nuxt.js 介绍 vue + vuex + vue-router + SSR + vue-meta 创建即配置。方便 官网 Nuxt.js 是一个基于 Vue.js 的通用应用框架。 通过对客户端/服务端基础架构的抽象组织，Nuxt.js 主要关注的是应用的 UI 渲染。 我们的目标是创建一个灵活的应用框架，你可以基于它初始化新项目的基础结构代码，或者在已有 Node.js 项目中使用 Nuxt.js。 特性 基于 Vue.js 自动代码分层 服务端渲染 强大的路由功能，支持异步数据 静态文件服务 ES6/ES7 语法支持 打包和压缩 JS 和 CSS HTML 头部标签管理 本地开发支持热加</description>
    </item>
    
  </channel>
</rss>