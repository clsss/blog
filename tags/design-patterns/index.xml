<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Design Patterns on Collin&#39;s Blog</title>
    <link>https://clsss.github.io/blog/tags/design-patterns/</link>
    <description>Recent content in Design Patterns on Collin&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zn-Hans</language>
    <lastBuildDate>Mon, 07 May 2018 20:54:11 +0800</lastBuildDate>
    
	<atom:link href="https://clsss.github.io/blog/tags/design-patterns/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>设计模式-设计模式（不常用）</title>
      <link>https://clsss.github.io/blog/blogs/2018-5/design/designmode3/</link>
      <pubDate>Mon, 07 May 2018 20:54:11 +0800</pubDate>
      
      <guid>https://clsss.github.io/blog/blogs/2018-5/design/designmode3/</guid>
      <description>设计模式-设计模式 这是一种模板 三大类型（23 种模式）： 创建型 工厂模式 单列模式 原型模式 组合型 适配器模式 修饰器模式 代理模式 外观模式 桥接模式 组合模式 享元模式 行为型 策略模式 模板方法模式 观察者模式（重） 迭代器模式（重） 职责连模式 命令模式 备忘录模式 状态模式（重） 访问者模式 中介则模式 解释器模式 1. 原型模式： 基于原有数据复制一份 bash var protptype = { getName: function () { return this.name }, say: function () { console.log(&#39;hello&#39;) } } Object.create(protptype) 桥接模式: 用于把抽象化与实现化解耦 二者独立变化 组</description>
    </item>
    
    <item>
      <title>设计模式-设计模式（常用）</title>
      <link>https://clsss.github.io/blog/blogs/2018-5/design/designmode2/</link>
      <pubDate>Mon, 07 May 2018 20:54:11 +0800</pubDate>
      
      <guid>https://clsss.github.io/blog/blogs/2018-5/design/designmode2/</guid>
      <description>设计模式-设计模式 这是一种模板 三大类型（23 种模式）： 创建型 工厂模式 单列模式 原型模式 组合型 适配器模式 修饰器模式 代理模式 外观模式 桥接模式 组合模式 享元模式 行为型 策略模式 模板方法模式 观察者模式（重） 迭代器模式（重） 职责连模式 命令模式 备忘录模式 状态模式（重） 访问者模式 中介则模式 解释器模式 1. 工厂模式： 将 new 操作单独封装 构造器的名字不能乱改=。= 例 1： 买东西，你传入钱，东西名 ==&amp;gt; 最后就返东西。至于中间的东西是哪里</description>
    </item>
    
  </channel>
</rss>