<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mobile on Collin&#39;s Blog</title>
    <link>https://clsss.github.io/blog/tags/mobile/</link>
    <description>Recent content in Mobile on Collin&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zn-Hans</language>
    <lastBuildDate>Tue, 25 Sep 2018 23:12:11 +0800</lastBuildDate>
    
	<atom:link href="https://clsss.github.io/blog/tags/mobile/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>移动端_Web如何调起App</title>
      <link>https://clsss.github.io/blog/blogs/2017-9/m_communicate_app/</link>
      <pubDate>Tue, 25 Sep 2018 23:12:11 +0800</pubDate>
      
      <guid>https://clsss.github.io/blog/blogs/2017-9/m_communicate_app/</guid>
      <description>一. 判断机型（Ios/Android） /* * 设备检测 * @return {{isIos:Function, isAndroid:Function}} */ export function getBrowserVersion() { const ua = navigator.userAgent || navigator.vendor || window.opera const uaInfo = { ios: /\(i[^;]+;( U;)? CPU.+Mac OS X/i.test(ua), android: /Android/i.test(ua) || /Linux/i.test(ua) } return { isIos() { return uaInfo.ios }, isAndroid() { return uaInfo.android } } } 二. 分类套路 1. Android 安卓有 2 种常用方式： a.自定义 Scheme b.Chrome Intent 自定义 Scheme scheme 协议在 app 注册之后，与前端进行统一约定，通过 H5 页面访问某个具体的协议地址，即可打开对应的 app 客户端页面。 1. 通过a标签打开，点击标签是启动 &amp;lt;a href=&amp;quot;m://app.com?openid=1</description>
    </item>
    
    <item>
      <title>移动端_性能优化</title>
      <link>https://clsss.github.io/blog/blogs/2017-9/m_performance/</link>
      <pubDate>Mon, 25 Sep 2017 23:12:11 +0800</pubDate>
      
      <guid>https://clsss.github.io/blog/blogs/2017-9/m_performance/</guid>
      <description>scroll 实际上，Safari 真的用了原生控件来实现，对于有-webkit-overflow-scrolling 的网页，会创建一个 UIScrollView，提供子 layer 给渲染模块使用 IOS（safari）： -webkit-overflow-scrolling: touch; // 弹簧效果 安卓： overflow:auto; // winphone8 和 android4+ bug： 当你给一个元素设置过 position:absolute;或者 position:relative;后再增加-webkit-overflow-scrolling: touch</description>
    </item>
    
    <item>
      <title>移动端_机型判断</title>
      <link>https://clsss.github.io/blog/blogs/2017-9/m_useragent/</link>
      <pubDate>Mon, 25 Sep 2017 23:12:11 +0800</pubDate>
      
      <guid>https://clsss.github.io/blog/blogs/2017-9/m_useragent/</guid>
      <description>判断机型（Ios/Android） function getBrowserVersion() { var ua = navigator.userAgent || navigator.vendor || window.opera; var uaInfo = { ios: !!ua.match(/\(i[^;]+;( U;)? CPU.+Mac OS X/i), android: ua.match(/Android/i) || ua.match(/Linux/i) }; var browserVersion = { isIos: function () { return uaInfo.ios; }, isAndroid: function () { return uaInfo.android; } }; return browserVersion; } 相应的机型发送相应的请求 if (openId) { if (browserVersion.isIos()) { window.webkit.messageHandlers.jumpToVerify.postMessage(&#39;verifyProspr&#39;); } else if (browserVersion.isAndroid()) { android.jumpPage(-9); } } else { goDownload(); } 相应的机型跳转相应的链接 if (browserVersion.isIos()) { location.href = &#39;http://app.appsflyer.com/id873518909?pid=web&amp;amp;c=index&#39;; } else if (browserVersion.isAndroid()) { location.href = &#39;http://app.appsflyer.com/com.luxy?pid=web&amp;amp;c=index&#39;; } 通知客户端修改右上角 feedback 图标 if (browserVersion.isIos()) { window.webkit.messageHandlers.JSMessage_shouldShowFeedbackButton.postMessage(); } else if (browserVersion.isAndroid()) { android.forceShowFeedbackOnTitleBar(); } 包括电脑跳转链接 $(&#39;.btn&#39;).click(function(){ var ua = navigator.userAgent.toLowerCase(); var userAgent = navigator.userAgent var t = Date.now(); var info = window.location.search.substr(1); var info2 = window.location.search.substr(1); if (/ipad|iphone|mac/i.test(ua)){ if (userAgent.indexOf(&amp;quot;Safari&amp;quot;) &amp;gt; -1) { window.location = &amp;quot;OMGmart://&amp;quot; + info; setTimeout(&amp;quot;window.location.href = &#39; &#39;,3000); } else { alert</description>
    </item>
    
    <item>
      <title>移动端_禁止竖屏</title>
      <link>https://clsss.github.io/blog/blogs/2017-9/m_no_portrait/</link>
      <pubDate>Mon, 25 Sep 2017 23:12:11 +0800</pubDate>
      
      <guid>https://clsss.github.io/blog/blogs/2017-9/m_no_portrait/</guid>
      <description>禁止竖屏 (function rotate(){ var orientation=window.orientation; //当屏幕方向改变时 if(orientation==90||orientation==-90){ document.body.style.display=&#39;none&#39;; alert(&amp;quot;请使用竖屏访问！&amp;quot;); } window.onorientationchange=function(){ document.body.style.display=&amp;quot;block&amp;quot;; rotate(); }; })() 禁止选择 &amp;lt;style type=&amp;quot;text/css&amp;quot;&amp;gt; .user_select_none { -webkit-tap-highlight-color: rgba(0, 0, 0, 0.5); -webkit-touch-callout: none; -webkit-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; } &amp;lt;/style&amp;gt;</description>
    </item>
    
    <item>
      <title>移动端——响应式布局</title>
      <link>https://clsss.github.io/blog/blogs/2017-9/m_adapter/</link>
      <pubDate>Mon, 25 Sep 2017 23:12:11 +0800</pubDate>
      
      <guid>https://clsss.github.io/blog/blogs/2017-9/m_adapter/</guid>
      <description>一、rem/em 单位 rem ( font size of root element) 相对长度单位。相对于根元素(即 html 元素)font-size 计算值的倍数 栗子： &amp;lt;style&amp;gt; html{ font-size: 12px; } p { font-size: 2rem; } &amp;lt;/style&amp;gt; &amp;lt;body&amp;gt; &amp;lt;p&amp;gt;我是html定义的12px的2倍，字体大小为24px&amp;lt;/p&amp;gt; &amp;lt;/body&amp;gt; # 如上如果我们设定html的字体大小为12px，有一段文字设置了font-size：2rem # 那么意思就是这段文字的font-siez是根元素的2倍，则12*2 = 24px; # 当然一般情</description>
    </item>
    
  </channel>
</rss>